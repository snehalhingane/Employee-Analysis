
#install pacakages

#dplyr-transform and summarize tabular data with rows and columns.

install.packages("dplyr")
install.packages("readr")
install.packages("ggplot2")

library("dplyr")
library("ggplot2")
library(readr) # To read csv file


#Reading All Dataset(EMP)
train_data<-read.csv("D:/ETL Hive/Demo/EMP.csv",header=TRUE)
head(train_data)

#str- display the content of the list
str(train_data)

#dim-for dimension
dim(train_data)

nrow(train_data)

ncol(train_data)


#Exploration Data Analysis

#Boxplot 
boxplot(train_data$SALARY,col="blue")

boxplot(train_data$SALARY,ylim=c(0,20000),col = "orange")

View(train_data)

#histogram
hist(xlab="SALARY",ylab="AGE",train_data$SALARY, col = "green",ylim = c(0,40),xlim = c(0,20000))

#to show the actual data points in histogram we use rug()
rug(train_data$DEPARTMENT_ID)

#barplot
table(train_data$Employee_Details)
count=table(train_data$Employee_Details)
percentage=table(train_data$Employee_Details)/99
percentage
barplot(percentage,col="blue",ylim=c(0.0,0.7),xlab = "Employee_Details",ylab="percentage")

#create pie chart
pie(percentage)

#create the scatter plot
with(train_data,plot(EMPLOYEE_ID,SALARY))
#add annotation to plot
title("Salary and Department_Id")

#ploting Tree
install.packages("partykit")
library(partykit)

tree <- ctree(EMPLOYEE_ID~SALARY+MANAGER_ID+DEPARTMENT_ID, train_data)
plot(tree, type='simple')

#Desion Tree confusion matrix
pred_tree<- predict(tree,train_data)

print("Confusion Matrix For decision tree"); 
table(predicated = pred_tree,actual=train_data$Employee_Details)

tab1<-table(predicted = p1,Actual=train_data$Employee_Details)
tab2<-table(predicted = pred_tree,Actual=train_data$Employee_Details)

print(paste('Decision Tree Accuracy',sum(diag(tab2))/sum(tab2)))#Decision Tree Accuracy


#suffle the data from dataset
shuffle <- sample(1:nrow(train_data))
head(shuffle)

t1<- train_data[shuffle, ]
head(t1)


#dplyr-transform and summarize tabular data with rows and columns
#ISLR-introduction to statstical learing with application in  R
#It provide the collection of data-sets used in the book 'An Introduction to Statistical Learning with Applications in R'.
library(ISLR)
library(naivebayes)
library(e1071)

A = data.frame(train_data)
str(A)

sf = sample(1:3,nrow(A),replace = TRUE,prob = c(.30,.60,.10))

#barplot for predicate the data
barplot(table(sample(1:3,nrow(A),replace = TRUE,prob = c(.30,.60,.10))))

trd = A[sf == 1,]
tsd = A[sf == 2,]

model_nb = naive_bayes(Employee_Details ~ ., data = trd)

model_e1 = naiveBayes(Employee_Details ~ ., data = trd)

pred_nb = predict(model_nb, tsd)
pred_nb
table(pred_nb,tsd$Employee_Details)

pred_e1 = predict(model_e1, tsd)
pred_e1


#classiicatio of single column from dataset

levels(train_data$JOB_ID)
table(train_data$JOB_ID)
plot(table(train_data$JOB_ID))


#analysis of salary in dataset
dim(train_data)

sal <- train_data[train_data$SALARY > 0, ] # keep only rows with po
sal

sal1 <- train_data[is.na(train_data$SALARY) == FALSE,] # keep only those rows where base pay value is NOT missing (NA)
sal1

summary(train_data$SALARY)













